// Code generated by MockGen. DO NOT EDIT.
// Source: infra/database/nosql/database.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nosql "github.com/masudur-rahman/expense-tracker-bot/infra/database/nosql"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockDatabase) Collection(name string) nosql.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", name)
	ret0, _ := ret[0].(nosql.Database)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseMockRecorder) Collection(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), name)
}

// DeleteOne mocks base method.
func (m *MockDatabase) DeleteOne(filter ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockDatabaseMockRecorder) DeleteOne(filter ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockDatabase)(nil).DeleteOne), filter...)
}

// FindMany mocks base method.
func (m *MockDatabase) FindMany(documents, filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", documents, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindMany indicates an expected call of FindMany.
func (mr *MockDatabaseMockRecorder) FindMany(documents, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockDatabase)(nil).FindMany), documents, filter)
}

// FindOne mocks base method.
func (m *MockDatabase) FindOne(document interface{}, filter ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{document}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockDatabaseMockRecorder) FindOne(document interface{}, filter ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{document}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDatabase)(nil).FindOne), varargs...)
}

// ID mocks base method.
func (m *MockDatabase) ID(id string) nosql.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", id)
	ret0, _ := ret[0].(nosql.Database)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDatabaseMockRecorder) ID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDatabase)(nil).ID), id)
}

// InsertMany mocks base method.
func (m *MockDatabase) InsertMany(documents []interface{}) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", documents)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockDatabaseMockRecorder) InsertMany(documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockDatabase)(nil).InsertMany), documents)
}

// InsertOne mocks base method.
func (m *MockDatabase) InsertOne(document interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", document)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockDatabaseMockRecorder) InsertOne(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDatabase)(nil).InsertOne), document)
}

// Query mocks base method.
func (m *MockDatabase) Query(query string, bindParams map[string]interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, bindParams)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseMockRecorder) Query(query, bindParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), query, bindParams)
}

// UpdateOne mocks base method.
func (m *MockDatabase) UpdateOne(document interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockDatabaseMockRecorder) UpdateOne(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockDatabase)(nil).UpdateOne), document)
}
